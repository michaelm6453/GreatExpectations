# -*- coding: utf-8 -*-
"""Great_Expectations_Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WLehxZHkZ7s0VBMZW0PJ8j4WwXzz6RXN

# Using Great Expectations to Validate Data against Expectations

### Part of my ongoing experimentation with ML and DS basics before formal course and projects

## 1. Install Great Expectations Library
"""

!pip install great_expectations

"""##2. Import Necessary Libraries

---


"""

import pandas as pd
import great_expectations as gx

"""##3. Load Labels.csv"""

# Mount Google Drive

from google.colab import drive
drive.mount('/content/drive')

# Access the CSV File
# Would be a secret or a config-map value if working in org
df = pd.read_csv('/content/drive/MyDrive/CSV/Labels.csv')

"""##4. Preview the Dataset"""

df.head()

"""##5. Set Up Great Expectations Context and Data Source"""

context = gx.get_context()
data_source = context.data_sources.add_pandas("pandas")
data_asset = data_source.add_dataframe_asset(name="pd dataframe asset")

"""##6. Define and Create a Data Batch"""

batch_definition = data_asset.add_batch_definition_whole_dataframe("batch definition")
batch = batch_definition.get_batch(batch_parameters={"dataframe": df})

"""##7. Define Three Expectations for Column Values"""

## Base Function
expectation = gx.expectations.ExpectColumnValuesToBeBetween(
    column="column", min_value=0, max_value=20
)

## This function only requires a column parameter, and not a max or min value
expectation = gx.expectations.ExpectColumnValuesToBeUnique(
    column="column"
)

"""### Expectation 1"""

# After analysis the column, maximum is around this range

expectation = gx.expectations.ExpectColumnMaxToBeBetween(
    column="Car2_Location_X",
    min_value=-56,
    max_value=-50
)

"""### Validate Data Against Expectation 1"""

validation_result = batch.validate(expectation)
print(validation_result)

"""### Expectation 2"""

expectation2 = gx.expectations.ExpectColumnMinToBeBetween(
    column="pedestrianLocationX_TopLeft",
    min_value=520,
    max_value=525
)

"""### Validate Data Against Expectation 2"""

validation_result2 = batch.validate(expectation2)
print(validation_result2)

"""### Expectation 3"""

expectation3 = gx.expectations.ExpectColumnPairValuesToBeEqual(
    column_A="Car1_Location_Z",
    column_B="Car2_Location_Z",
)

"""### Validate Data Against Expectation 3"""

validation_result3 = batch.validate(expectation3)
print(validation_result3)